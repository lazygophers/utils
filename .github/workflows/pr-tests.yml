name: PR Tests and Quality Checks

on:
  pull_request:
    branches: [master]
  workflow_dispatch: # Allow manual trigger with confirmation

permissions:
  contents: read
  security-events: write # Required for security scanning
  pull-requests: read    # Required for PR linting
  actions: read         # Required for downloading artifacts

env:
  GO_VERSION: '1.25'

jobs:
  # Job requires manual approval for PR execution
  approve-pr-tests:
    name: Approve PR Tests
    runs-on: lazy
    if: github.event_name == 'pull_request'
    environment: pr-approval # This environment requires manual approval
    steps:
      - name: Approval Required
        run: |
          echo "✅ PR tests approved and ready to run"
          echo "This step requires manual approval in the GitHub UI"

  test-and-lint:
    name: Tests and Code Quality
    runs-on: lazy
    needs: approve-pr-tests
    if: always() && (needs.approve-pr-tests.result == 'success' || github.event_name == 'workflow_dispatch')

    steps:
      # ===== SETUP PHASE =====
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      # ===== PERSISTENT GO ENVIRONMENT =====
      - name: Setup persistent Go environment
        id: go-setup
        run: |
          echo "🔍 Setting up persistent Go environment..."
          GO_VERSION="${{ env.GO_VERSION }}"

          # Check if this is a self-hosted runner
          if [ "${{ runner.name }}" = "lazy" ] || [ "${{ contains(runner.labels, 'self-hosted') }}" = "true" ]; then
            echo "🏠 Self-hosted runner: Using persistent Go installation"

            # Persistent Go installation directory
            GO_INSTALL_DIR="/tmp/action/go"
            GO_ROOT="${GO_INSTALL_DIR}/go${GO_VERSION}"

            # Check if Go version is already installed
            if [ -d "$GO_ROOT" ] && [ -x "$GO_ROOT/bin/go" ]; then
              INSTALLED_VERSION=$($GO_ROOT/bin/go version | awk '{print $3}' | sed 's/go//')
              if [ "$INSTALLED_VERSION" = "$GO_VERSION" ]; then
                echo "✅ Go $GO_VERSION already installed at $GO_ROOT"
                echo "use_existing_go=true" >> $GITHUB_OUTPUT
              else
                echo "⚠️ Different Go version found ($INSTALLED_VERSION), will reinstall"
                echo "use_existing_go=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "📦 Go $GO_VERSION not found, will install"
              echo "use_existing_go=false" >> $GITHUB_OUTPUT
            fi

            echo "go_root=$GO_ROOT" >> $GITHUB_OUTPUT
            echo "go_install_dir=$GO_INSTALL_DIR" >> $GITHUB_OUTPUT
            echo "is_self_hosted=true" >> $GITHUB_OUTPUT
          else
            echo "☁️ GitHub-hosted runner: Using standard setup-go action"
            echo "use_existing_go=false" >> $GITHUB_OUTPUT
            echo "is_self_hosted=false" >> $GITHUB_OUTPUT
          fi

      - name: Install Go (self-hosted, if needed)
        if: steps.go-setup.outputs.is_self_hosted == 'true' && steps.go-setup.outputs.use_existing_go == 'false'
        run: |
          echo "📥 Installing Go ${{ env.GO_VERSION }} for persistent use..."
          GO_VERSION="${{ env.GO_VERSION }}"
          GO_INSTALL_DIR="${{ steps.go-setup.outputs.go_install_dir }}"
          GO_ROOT="${{ steps.go-setup.outputs.go_root }}"

          # Create installation directory
          mkdir -p "$GO_INSTALL_DIR"

          # Determine architecture
          ARCH=$(uname -m)
          case $ARCH in
            x86_64) GO_ARCH="amd64" ;;
            aarch64|arm64) GO_ARCH="arm64" ;;
            *) echo "❌ Unsupported architecture: $ARCH"; exit 1 ;;
          esac

          # Determine OS
          OS=$(uname -s | tr '[:upper:]' '[:lower:]')

          # Download and install Go
          GO_TARBALL="go${GO_VERSION}.${OS}-${GO_ARCH}.tar.gz"
          GO_URL="https://go.dev/dl/${GO_TARBALL}"

          echo "🌐 Downloading: $GO_URL"
          cd "$GO_INSTALL_DIR"

          # Download with retry mechanism
          for i in {1..3}; do
            if curl -fsSL -o "$GO_TARBALL" "$GO_URL"; then
              echo "✅ Download successful on attempt $i"
              break
            else
              echo "⚠️ Download failed on attempt $i"
              if [ $i -eq 3 ]; then
                echo "❌ Failed to download Go after 3 attempts"
                exit 1
              fi
              sleep 5
            fi
          done

          # Extract Go
          echo "📦 Extracting Go..."
          rm -rf go  # Remove any existing Go directory
          tar -xzf "$GO_TARBALL"
          rm "$GO_TARBALL"

          # Move to versioned directory
          mv go "go${GO_VERSION}"

          echo "✅ Go $GO_VERSION installed successfully at $GO_ROOT"

      - name: Configure Go environment (self-hosted)
        if: steps.go-setup.outputs.is_self_hosted == 'true'
        run: |
          GO_ROOT="${{ steps.go-setup.outputs.go_root }}"
          echo "🔧 Configuring Go environment..."

          # Set Go environment variables
          echo "GOROOT=$GO_ROOT" >> $GITHUB_ENV
          echo "PATH=$GO_ROOT/bin:$PATH" >> $GITHUB_ENV

          # Verify installation
          echo "🔍 Verifying Go installation..."
          $GO_ROOT/bin/go version

          echo "✅ Go environment configured:"
          echo "  - GOROOT: $GO_ROOT"
          echo "  - Version: $($GO_ROOT/bin/go version)"

      - name: Set up Go (GitHub-hosted runners)
        if: steps.go-setup.outputs.is_self_hosted == 'false'
        uses: actions/setup-go@v6
        with:
          go-version: ${{ env.GO_VERSION }}
          check-latest: true
          cache: false  # Disable to avoid network issues

      # ===== LOCAL CACHE CONFIGURATION =====
      - name: Setup local cache directories
        run: |
          echo "📁 Setting up local cache directories..."
          LOCAL_CACHE_BASE="/tmp/action"
          GO_CACHE_DIR="${LOCAL_CACHE_BASE}/go-build"
          GO_MOD_CACHE_DIR="${LOCAL_CACHE_BASE}/go-mod"

          # Create cache directories
          mkdir -p "$GO_CACHE_DIR" "$GO_MOD_CACHE_DIR"

          # Set Go cache environment variables
          echo "GOCACHE=$GO_CACHE_DIR" >> $GITHUB_ENV
          echo "GOMODCACHE=$GO_MOD_CACHE_DIR" >> $GITHUB_ENV

          echo "✅ Local cache configured:"
          echo "  - GOCACHE: $GO_CACHE_DIR"
          echo "  - GOMODCACHE: $GO_MOD_CACHE_DIR"

      - name: Download and verify dependencies
        run: |
          echo "📦 Downloading dependencies..."
          go mod download
          go mod verify
          echo "✅ Dependencies verified"

      # ===== LINTING PHASE =====
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest
          args: --timeout=10m --issues-exit-code=1

      # ===== SECURITY PHASE =====
      - name: Run security scan
        run: |
          echo "🔒 Running security checks..."
          if command -v gosec >/dev/null 2>&1; then
            gosec -fmt=text -exclude=G104 ./... || echo "⚠️ Security scan found issues but continuing..."
          else
            echo "⚠️ gosec not installed, installing..."
            go install github.com/securego/gosec/v2/cmd/gosec@latest
            gosec -fmt=text -exclude=G104 ./... || echo "⚠️ Security scan found issues but continuing..."
          fi
          echo "✅ Security scan completed"

      # ===== TESTING PHASE =====
      - name: Run tests with coverage
        run: |
          echo "🧪 Running tests with coverage for PR validation..."
          mkdir -p docs/reports
          go test -coverprofile=docs/reports/coverage.out -covermode=atomic -timeout 5m $(go list ./... | grep -v -E "(pgp|cryptox|human)")
          go tool cover -html=docs/reports/coverage.out -o docs/reports/coverage.html

          # Get coverage percentage
          COVERAGE=$(go tool cover -func=docs/reports/coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
          echo "📊 Coverage: ${COVERAGE}%"
          echo "COVERAGE_PERCENT=${COVERAGE}" >> $GITHUB_ENV
          echo "✅ All tests passed"

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./docs/reports/coverage.out
          flags: pr-tests
          name: codecov-pr
          token: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true

      - name: Verify coverage meets threshold
        run: |
          COVERAGE=${{ env.COVERAGE_PERCENT }}
          echo "📊 Current coverage: ${COVERAGE}%"
          THRESHOLD=65
          if awk "BEGIN {exit !($COVERAGE < $THRESHOLD)}"; then
            echo "⚠️ Coverage ${COVERAGE}% is below threshold ${THRESHOLD}%"
            echo "This PR may reduce overall code coverage"
          else
            echo "✅ Coverage ${COVERAGE}% meets threshold ${THRESHOLD}%"
          fi

      - name: Generate coverage report for PR
        run: |
          echo "📋 Generating coverage report for PR..."
          echo "## 📊 Test Coverage Report" > pr-coverage-summary.md
          echo "" >> pr-coverage-summary.md
          echo "**Coverage for this PR:** ${{ env.COVERAGE_PERCENT }}%" >> pr-coverage-summary.md
          echo "" >> pr-coverage-summary.md
          echo "### Coverage by Package" >> pr-coverage-summary.md
          echo "" >> pr-coverage-summary.md
          echo '```' >> pr-coverage-summary.md
          go tool cover -func=docs/reports/coverage.out >> pr-coverage-summary.md
          echo '```' >> pr-coverage-summary.md
          echo "" >> pr-coverage-summary.md
          echo "### Coverage Threshold Check" >> pr-coverage-summary.md
          THRESHOLD=65
          if awk "BEGIN {exit !(${{ env.COVERAGE_PERCENT }} >= $THRESHOLD)}"; then
            echo "✅ **Status**: Meets threshold ($THRESHOLD%)" >> pr-coverage-summary.md
          else
            echo "⚠️ **Status**: Below threshold ($THRESHOLD%)" >> pr-coverage-summary.md
          fi

      # ===== BUILD PHASE =====
      - name: Build project
        run: |
          echo "🔨 Building project..."
          go build -v ./...
          echo "✅ Build completed"

      # ===== PR SUMMARY =====
      - name: PR Test Summary
        run: |
          echo "## 🎯 PR Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Linting**: Passed" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Security Scan**: Passed" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Tests**: Passed" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Build**: Passed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Coverage Report" >> $GITHUB_STEP_SUMMARY
          echo "**Coverage**: ${{ env.COVERAGE_PERCENT }}%" >> $GITHUB_STEP_SUMMARY
          THRESHOLD=65
          if awk "BEGIN {exit !(${{ env.COVERAGE_PERCENT }} >= $THRESHOLD)}"; then
            echo "**Status**: ✅ Meets threshold ($THRESHOLD%)" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Status**: ⚠️ Below threshold ($THRESHOLD%)" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚀 **Status**: Ready for review and merge" >> $GITHUB_STEP_SUMMARY