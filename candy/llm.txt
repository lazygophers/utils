# Candy Package - Go Syntactic Sugar Utilities

## Overview
The candy package provides syntactic sugar utilities for Go, offering type-safe generic functions that simplify common programming operations.

## Key Functions

### Mathematical Operations
- **Abs[T]**: Calculate absolute value for numeric types
- **Sqrt[T]**: Square root calculation for floating-point types  
- **Cbrt[T]**: Cube root calculation for floating-point types
- **Pow[T]**: Power calculation with base and exponent

### Collection Utilities
- **Chunk[T]**: Split slice into smaller chunks of specified size
- **Contains[T]**: Check if slice contains a specific element
- **Each[T]**: Apply function to each element in slice
- **Reduce[T, R]**: Reduce slice to single value using accumulator function
- **All[T]**: Check if all elements match predicate
- **Any[T]**: Check if any element matches predicate
- **Bottom[T]**: Get N smallest elements from slice

### Statistical Functions
- **Average[T]**: Calculate arithmetic mean of numeric slice
- **Max[T]**: Find maximum value in slice
- **Min[T]**: Find minimum value in slice

### Sorting and Selection
- **SortUsing[T]**: Sort slice using custom comparison function
- **Random[T]**: Select random element from slice

## Code Examples

```go
import "github.com/lazygophers/utils/candy"

// Mathematical operations
abs := candy.Abs(-42)           // Returns 42
sqrt := candy.Sqrt(16.0)        // Returns 4.0
power := candy.Pow(2, 3)        // Returns 8

// Collection operations
numbers := []int{1, 2, 3, 4, 5, 6}
chunks := candy.Chunk(numbers, 2)  // [[1,2], [3,4], [5,6]]
exists := candy.Contains([]string{"a", "b"}, "b")  // true

// Statistical functions
avg := candy.Average([]float64{1, 2, 3, 4})  // 2.5
max := candy.Max([]int{3, 7, 2, 9, 1})       // 9

// Reduce example
sum := candy.Reduce([]int{1,2,3,4}, 0, func(acc, v int) int {
    return acc + v
})  // Returns 10
```

## Type Constraints
- Uses `golang.org/x/exp/constraints` for type safety
- Supports Integer and Float constraints for mathematical operations
- Generic functions work with comparable types for collections

## Dependencies
- `golang.org/x/exp/constraints` - Type constraints
- `math/rand` - Random number generation
- Standard library packages for mathematical operations

## Usage Patterns
1. **Pipeline Processing**: Chain operations for data transformation
2. **Statistical Analysis**: Compute metrics on numeric data
3. **Collection Management**: Split, filter, and process slices
4. **Type-Safe Operations**: Leverage generics for compile-time safety

## Performance Notes
- Mathematical operations are optimized for their respective types
- Collection operations work efficiently with Go's slice semantics
- Random operations use Go's standard random number generator