# GitLab CI configuration for LazyGophers Utils
# https://docs.gitlab.com/ee/ci/

# Define stages
stages:
  - validate
  - test
  - lint
  - security
  - build
  - deploy

# Global variables
variables:
  GO_VERSION: "1.24"
  CGO_ENABLED: "0"
  GOPATH: $CI_PROJECT_DIR/.go
  GOCACHE: $CI_PROJECT_DIR/.cache/go-build
  GOLANGCI_LINT_VERSION: "v1.60.3"

# Cache configuration
.go-cache: &go-cache
  cache:
    key: "${CI_JOB_NAME}-${GO_VERSION}"
    paths:
      - .go/pkg/mod/
      - .cache/go-build/
    policy: pull-push

# Base image for Go jobs
.go-template: &go-template
  image: golang:${GO_VERSION}-alpine
  <<: *go-cache
  before_script:
    - apk add --no-cache git make build-base
    - mkdir -p .go
    - export PATH=$GOPATH/bin:$PATH
    - go version
    - go mod download
    - go mod verify

# Validate stage
validate:
  stage: validate
  <<: *go-template
  script:
    - echo "Validating Go modules..."
    - go mod tidy
    - git diff --exit-code go.mod go.sum
    - echo "‚úÖ Go modules are valid"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_COMMIT_BRANCH == "luoxin"'

# Test stage
test:
  stage: test
  <<: *go-template
  script:
    - echo "Running tests with coverage..."
    # Exclude problematic packages
    - PACKAGES=$(go list ./... | grep -v pgp)
    - go test -race -coverprofile=coverage.out -covermode=atomic $PACKAGES
    - go tool cover -func=coverage.out | tail -1
    - COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
    - echo "Test coverage: ${COVERAGE}%"
    # Fail if coverage is too low
    - |
      if [ $(echo "$COVERAGE < 70" | bc -l) -eq 1 ]; then
        echo "‚ùå Test coverage ${COVERAGE}% is below minimum threshold of 70%"
        exit 1
      fi
    - echo "‚úÖ Tests passed with ${COVERAGE}% coverage"
  coverage: '/total:\s+\(statements\)\s+(\d+\.\d+)%/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - coverage.out
      - coverage.xml
    expire_in: 1 week
  after_script:
    # Convert to Cobertura format for GitLab coverage visualization
    - |
      if command -v gocover-cobertura >/dev/null 2>&1; then
        gocover-cobertura < coverage.out > coverage.xml
      fi

# Lint stage with golangci-lint using official best practices
lint:
  stage: lint
  image: golangci/golangci-lint:${GOLANGCI_LINT_VERSION}-alpine
  <<: *go-cache
  before_script:
    - apk add --no-cache git
    - export PATH=$GOPATH/bin:$PATH
  script:
    - echo "Running golangci-lint..."
    - golangci-lint --version
    - golangci-lint run --timeout=10m --issues-exit-code=1
    - echo "‚úÖ Lint checks passed"
  allow_failure: false
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_COMMIT_BRANCH == "luoxin"'

# Alternative approach using GitLab's Code Quality integration
# Uncomment to use GitLab's native integration (requires GitLab 15.x+)
# code_quality:
#   stage: lint
#   include:
#     - component: $CI_SERVER_FQDN/components/code-quality-oss/codequality-os-scanners-integration/golangci@1.0.1

# Security scanning
security:
  stage: security
  <<: *go-template
  script:
    - echo "Running security checks..."
    # Install gosec for security scanning
    - go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
    - gosec -fmt gitlab-sast -out gl-sast-report.json -stdout -verbose=text ./...
    - echo "‚úÖ Security scan completed"
  artifacts:
    reports:
      sast: gl-sast-report.json
    paths:
      - gl-sast-report.json
    expire_in: 1 week
  allow_failure: true
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_BRANCH == "main"'

# Build stage
build:
  stage: build
  <<: *go-template
  script:
    - echo "Building Go packages..."
    - go build -v ./...
    - echo "‚úÖ Build successful"
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_BRANCH == "main"'
    - if: '$CI_COMMIT_BRANCH == "luoxin"'

# Benchmark testing (optional)
benchmark:
  stage: test
  <<: *go-template
  script:
    - echo "Running performance benchmarks..."
    - go test -bench=. -benchmem -run=^$ ./... | tee benchmark.txt
    - echo "‚úÖ Benchmarks completed"
  artifacts:
    paths:
      - benchmark.txt
    expire_in: 1 week
  allow_failure: true
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_BRANCH == "main"'

# Documentation generation
docs:
  stage: build
  image: golang:${GO_VERSION}
  <<: *go-cache
  before_script:
    - apt-get update && apt-get install -y graphviz pandoc
    - export PATH=$GOPATH/bin:$PATH
    - go mod download
  script:
    - echo "Generating documentation..."
    - chmod +x docs/generate_docs.sh
    - ./docs/generate_docs.sh
    - echo "‚úÖ Documentation generated"
  artifacts:
    paths:
      - docs/
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_BRANCH == "main"'

# Deploy documentation to GitLab Pages
pages:
  stage: deploy
  image: alpine:latest
  dependencies:
    - docs
  script:
    - echo "Preparing documentation for GitLab Pages..."
    - mkdir public
    - cp -r docs/* public/
    # Create index.html for better navigation
    - |
      cat > public/index.html << 'EOF'
      <!DOCTYPE html>
      <html lang="en">
      <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>LazyGophers Utils Documentation</title>
          <style>
              body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Arial, sans-serif; margin: 0; padding: 20px; background-color: #f6f8fa; }
              .container { max-width: 1200px; margin: 0 auto; background: white; padding: 40px; border-radius: 8px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }
              .header { text-align: center; margin-bottom: 40px; }
              .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }
              .card { border: 1px solid #e1e4e8; border-radius: 6px; padding: 20px; background: #ffffff; }
              .card h3 { margin-top: 0; color: #24292e; }
              .badge { display: inline-block; padding: 4px 8px; border-radius: 3px; font-size: 12px; font-weight: bold; margin: 2px; }
              .badge-success { background-color: #28a745; color: white; }
              .badge-info { background-color: #17a2b8; color: white; }
              .badge-warning { background-color: #ffc107; color: #212529; }
              a { color: #0366d6; text-decoration: none; }
              a:hover { text-decoration: underline; }
              .logo { font-size: 2em; margin-bottom: 10px; }
          </style>
      </head>
      <body>
          <div class="container">
              <div class="header">
                  <div class="logo">üêπ</div>
                  <h1>LazyGophers Utils Documentation</h1>
                  <p>High-performance Go utility library with comprehensive documentation</p>
                  <div>
                      <span class="badge badge-success">Go 1.24+</span>
                      <span class="badge badge-info">GitLab CI</span>
                      <span class="badge badge-warning">Active Development</span>
                  </div>
              </div>
              
              <div class="grid">
                  <div class="card">
                      <h3>üìö Core Documentation</h3>
                      <ul>
                          <li><a href="architecture_en.html">Architecture Guide</a></li>
                          <li><a href="API_REFERENCE.html">API Reference</a></li>
                          <li><a href="CONTRIBUTING_en.html">Contributing Guide</a></li>
                          <li><a href="modules/">Module Documentation</a></li>
                      </ul>
                  </div>
                  
                  <div class="card">
                      <h3>üìä Reports & Analysis</h3>
                      <ul>
                          <li><a href="coverage_report.html">Coverage Report</a></li>
                          <li><a href="performance_report.html">Performance Report</a></li>
                          <li><a href="benchmark_report.txt">Benchmark Results</a></li>
                      </ul>
                  </div>
                  
                  <div class="card">
                      <h3>üåç Multi-Language Support</h3>
                      <ul>
                          <li><a href="README_multilingual.html">Language Index</a></li>
                          <li><a href="architecture_zh.html">Êû∂ÊûÑÊñáÊ°£ (‰∏≠Êñá)</a></li>
                          <li><a href="architecture_zh-hant.html">Êû∂ÊßãÊñáÊ™î (ÁπÅÈ´î)</a></li>
                          <li><a href="architecture_ar.html">Ÿàÿ´ÿßÿ¶ŸÇ ÿßŸÑÿ®ŸÜŸäÿ© (ÿπÿ±ÿ®Ÿä)</a></li>
                      </ul>
                  </div>
                  
                  <div class="card">
                      <h3>üîß Development Tools</h3>
                      <ul>
                          <li><a href="api/">API Documentation</a></li>
                          <li><a href="development/">Development Guide</a></li>
                          <li><a href="testing/">Testing Guide</a></li>
                          <li><a href="performance/">Performance Guide</a></li>
                      </ul>
                  </div>
              </div>
              
              <footer style="text-align: center; margin-top: 40px; padding-top: 20px; border-top: 1px solid #e1e4e8; color: #586069;">
                  <p>Generated by GitLab CI ‚Ä¢ <a href="https://github.com/lazygophers/utils">GitHub Repository</a></p>
                  <p>Last updated: $(date)</p>
              </footer>
          </div>
      </body>
      </html>
      EOF
    - echo "‚úÖ Documentation deployed to GitLab Pages"
  artifacts:
    paths:
      - public
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_BRANCH == "main"'

# Release job (tags only)
release:
  stage: deploy
  <<: *go-template
  script:
    - echo "Preparing release artifacts..."
    - mkdir -p dist
    # Build for multiple platforms
    - |
      for GOOS in linux darwin windows; do
        for GOARCH in amd64 arm64; do
          if [ "$GOOS" = "windows" ]; then
            BINARY_NAME="lazygophers-utils-${GOOS}-${GOARCH}.exe"
          else
            BINARY_NAME="lazygophers-utils-${GOOS}-${GOARCH}"
          fi
          echo "Building ${BINARY_NAME}..."
          env GOOS=$GOOS GOARCH=$GOARCH go build -ldflags="-s -w" -o "dist/${BINARY_NAME}" ./...
        done
      done
    - ls -la dist/
    - echo "‚úÖ Release artifacts created"
  artifacts:
    paths:
      - dist/
    expire_in: 1 year
  rules:
    - if: '$CI_COMMIT_TAG'

# Include additional configurations
include:
  # Security scanning templates
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml

# Override SAST job to work with Go
gosec-sast:
  extends: .sast-analyzer
  image:
    name: "registry.gitlab.com/security-products/gosec:latest"
    entrypoint: [""]
  script:
    - gosec -fmt gitlab-sast -out gl-sast-report.json -stdout -verbose=text ./...

# Job for merge request analysis
.mr-analysis: &mr-analysis
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

# Merge request pipeline optimizations
lint:mr:
  <<: *mr-analysis
  extends: lint
  script:
    - echo "Running lint for merge request..."
    - golangci-lint run --timeout=5m --new-from-rev=origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME

test:mr:
  <<: *mr-analysis
  extends: test
  script:
    - echo "Running tests for merge request..."
    # Run tests only for changed packages
    - CHANGED_PACKAGES=$(git diff origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME --name-only | grep '\.go$' | xargs dirname | sort | uniq | xargs -I {} sh -c 'echo "./{}"' | grep -v pgp)
    - if [ -n "$CHANGED_PACKAGES" ]; then go test -race -coverprofile=coverage.out $CHANGED_PACKAGES; fi

# Notification job
notify:
  stage: deploy
  image: alpine:latest
  script:
    - echo "Pipeline completed successfully! üéâ"
    - |
      if [ "$CI_PIPELINE_SOURCE" = "merge_request_event" ]; then
        echo "Merge request pipeline completed"
      elif [ -n "$CI_COMMIT_TAG" ]; then
        echo "Release pipeline completed for tag: $CI_COMMIT_TAG"
      else
        echo "Branch pipeline completed for: $CI_COMMIT_BRANCH"
      fi
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: on_success
    - if: '$CI_COMMIT_TAG'
      when: on_success
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: on_success
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: on_success